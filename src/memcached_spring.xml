<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	 http://www.springframework.org/schema/aop
	 http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	 http://www.springframework.org/schema/context
	 http://www.springframework.org/schema/context/spring-context-4.1.xsd
	 http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	 http://www.springframework.org/schema/cache
	 http://www.springframework.org/schema/cache/spring-cache-4.1.xsd">
	<bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">
		<constructor-arg>
			<list>
				<bean class="java.net.InetSocketAddress">
					<constructor-arg>
						<value>${cache.host1}</value>
					</constructor-arg>
					<constructor-arg>
						<value>${cache.port1}</value>
					</constructor-arg>
				</bean>
				<bean class="java.net.InetSocketAddress">
					<constructor-arg>
						<value>${cache.host2}</value>
					</constructor-arg>
					<constructor-arg>
						<value>${cache.port2}</value>
					</constructor-arg>
				</bean>
			</list>
		</constructor-arg>
		<constructor-arg>
			<list>
				<value>${cache.weight1}</value>
				<value>${cache.weight2}</value>
			</list>
		</constructor-arg>
		<!-- <property name="authInfoMap">
			<map>
				<entry key-ref="server1">
					<bean class="net.rubyeye.xmemcached.auth.AuthInfo" factory-method="typical">
						<constructor-arg index="0">
							<value>root</value>
						</constructor-arg>
						<constructor-arg index="1">
							<value>root</value>
						</constructor-arg>
					</bean>
				</entry>
			</map>
		</property> -->
		<property name="connectionPoolSize" value="${cache.max_connection}" />
		<!--
			//使用二进制文件  				BinaryCommandFactory
			//文本协议					TextCommandFactory
			Kestrel是twitter开源的一个scala写的简单高效MQ，它支持 memcached文本协议，但是并不完全兼容，例如它不支持flag，导致很多利用flag做序列化的客户端无法正常运作。
			因此Xmemcached特意提供了KestrelCommandFactory?用于支持Kestrel。
			使用KestrelCommandFactory?即可拥有如下好处：
			默认关闭get优化，因为kestrel不支持bulk get；
			支持kestrel的阻塞获取和可靠获取；
			允许向kestrel存储任意java序列化类型。设置KestrelCommandFactory:
		 -->
		<property name="commandFactory">
			<bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory" />
		</property>
		<property name="sessionLocator">
			<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator" />
		</property>
		<property name="transcoder">
			<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />
		</property>
		<property name="bufferAllocator">
			<bean class="net.rubyeye.xmemcached.buffer.SimpleBufferAllocator" />
		</property>
		<property name="failureMode" value="false"/>
	</bean>
	<!-- Use factory bean to build memcached client -->
	<bean id="memcachedClient" factory-bean="memcachedClientBuilder"
		factory-method="build" destroy-method="shutdown" />
</beans>